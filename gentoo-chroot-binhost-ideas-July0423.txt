gentoo
-----
chroot's = use my script @ https://github.com/genbtc/gentoo-public/blob/main/chroot/genr8-chroot.sh
container's -- choose between docker/podman/lxc/lxd
bwrap's -- sys-apps/bubblwrap unpriveleged sandboxing tool, user namespaces 
unshare's -- more namespaces
VM's -- entire linux system in Virtualbox or QEMU, or other

binhosts (binpkgs)
+
portage - client/server
=
DISTCCBINHOST

normal way to create binpkgs:
    FEATURES="buildpkg"

files ending in .xpak's(.tbz2 + metadata) are created locally
 unless GPKG signing is turned on then its .gpkg
default is $PKGDIR:=/var/cache/binpkgs
local index: /var/cache/binpkgs/Packages

From here, its very easy to start serving what you've created.

$ cd /var/cache/binpkgs
$ ls Packages
$ emaint binhost --check

$ python -m http.server 8008

is enough to serve a binhost. then,

export PORTAGE_BINHOST="http://192.168.1.1"
or
export PORTAGE_BINHOST="http://127.0.0.1:8080 http://192.168.1.1"
(you can set up multiple repositories by separating eachs' URL with a space char )
(theres also another method to set it up, using binrepos.conf instead of the env var)

emerge -g @world option on the client,
will download the binhost index, and take it into account.
(theres also another FEATURES variable named getbinpkg , basically forces on -g mode )

the process downloads the Packages file from the remote host and caches it locally stored @  
remote index: /var/cache/edb/binhost/${REMOTEHOSTNAME}/Packages

sometimes you need to clear the client's cache if you do too many updates on the other end, and portage (somehow) doesnt notice.
rm -rf /var/cache/edb/binhost/*/

sometimes the binhost gets cranky about USE flags or deps not matching, so theres two flags for emerge:
--binpkg-respect-use=y
--binpkg-changed-deps=y
this will force it to happen

the emerge -G option (capital G this time) will try to force it to use binpkgs ONLY (both local + remote) things may be skipped or rejected


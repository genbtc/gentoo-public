--- linux-5.19/scripts/kconfig/qconf.cc	2022-07-31 17:03:01.000000000 -0400
+++ linux-5.19/scripts/kconfig/qconf.cc	2022-12-09 17:08:55.047855787 -0500
@@ -119,10 +119,17 @@
 				break;
 			setIcon(promptColIdx, QIcon());
 		}
+		setText(dataColIdx, QChar('>'));
 		goto set_prompt;
 	case P_COMMENT:
 		setIcon(promptColIdx, QIcon());
-		prompt = "*** " + prompt + " ***";
+		prompt = "****** " + prompt + " ******";
+		setText(dataColIdx, QChar('P'));
+		if (list->showColors) {
+			setForeground(promptColIdx, QColor("gray"));
+			setForeground(1, QColor("gray"));
+			setForeground(dataColIdx, QColor("gray"));
+		}
 		goto set_prompt;
 	default:
 		;
@@ -139,7 +146,6 @@
 		char ch;
 
 		if (!sym_is_changeable(sym) && list->optMode == normalOpt) {
-			setIcon(promptColIdx, QIcon());
 			break;
 		}
 		expr = sym_get_tristate_value(sym);
@@ -150,10 +156,18 @@
 			else
 				setIcon(promptColIdx, symbolYesIcon);
 			ch = 'Y';
+			if (list->showColors) {
+				setForeground(1, QColor("green"));
+				setForeground(2, QColor("green"));
+			}
 			break;
 		case mod:
 			setIcon(promptColIdx, symbolModIcon);
 			ch = 'M';
+			if (list->showColors) {
+				setForeground(1, QColor("yellow"));
+				setForeground(2, QColor("yellow"));
+			}
 			break;
 		default:
 			if (sym_is_choice_value(sym) && type == S_BOOLEAN)
@@ -161,6 +175,10 @@
 			else
 				setIcon(promptColIdx, symbolNoIcon);
 			ch = 'N';
+			if (list->showColors) {
+				setForeground(1, QColor("red"));
+				setForeground(2, QColor("red"));
+			}
 			break;
 		}
 
@@ -172,6 +190,15 @@
 		setText(dataColIdx, sym_get_string_value(sym));
 		break;
 	}
+	if (sym && !sym_is_changeable(sym)) {
+		if (list->showColors) {
+			setForeground(promptColIdx, QColor("gray"));
+			setForeground(1, QColor("gray"));
+			setForeground(dataColIdx, QColor("gray"));
+		}
+		//setText(dataColIdx, QChar('P'));
+	}
+
 	if (!sym_has_value(sym) && visible)
 		prompt += " (NEW)";
 set_prompt:
@@ -299,7 +326,7 @@
 ConfigList::ConfigList(QWidget *parent, const char *name)
 	: QTreeWidget(parent),
 	  updateAll(false),
-	  showName(false), mode(singleMode), optMode(normalOpt),
+	  showName(true), showColors(true), mode(singleMode), optMode(normalOpt),
 	  rootEntry(0), headerPopup(0)
 {
 	setObjectName(name);
@@ -309,14 +336,15 @@
 	setVerticalScrollMode(ScrollPerPixel);
 	setHorizontalScrollMode(ScrollPerPixel);
 
-	setHeaderLabels(QStringList() << "Option" << "Name" << "Value");
+	setHeaderLabels(QStringList() << "Description" << "SYMBOL" << "Value");
 
 	connect(this, &ConfigList::itemSelectionChanged,
 		this, &ConfigList::updateSelection);
 
 	if (name) {
 		configSettings->beginGroup(name);
-		showName = configSettings->value("/showName", false).toBool();
+		showName = configSettings->value("/showName", true).toBool();
+		showColors = configSettings->value("/showColors", true).toBool();
 		optMode = (enum optionMode)configSettings->value("/optionMode", 0).toInt();
 		configSettings->endGroup();
 		connect(configApp, &QApplication::aboutToQuit,
@@ -375,6 +403,7 @@
 	if (!objectName().isEmpty()) {
 		configSettings->beginGroup(objectName());
 		configSettings->setValue("/showName", showName);
+		configSettings->setValue("/showColors", showColors);
 		configSettings->setValue("/optionMode", (int)optMode);
 		configSettings->endGroup();
 	}
@@ -409,8 +438,10 @@
 	if (!menu)
 		return;
 	type = menu->prompt ? menu->prompt->type : P_UNKNOWN;
-	if (mode == menuMode && type == P_MENU)
+	if (type == P_MENU) {
 		emit menuSelected(menu);
+	}
+	setCurrentItem(item);
 }
 
 void ConfigList::updateList()
@@ -471,17 +502,6 @@
 	}
 }
 
-void ConfigList::updateListAllForAll()
-{
-	QListIterator<ConfigList *> it(allLists);
-
-	while (it.hasNext()) {
-		ConfigList *list = it.next();
-
-		list->updateList();
-	}
-}
-
 void ConfigList::setValue(ConfigItem* item, tristate val)
 {
 	struct symbol* sym;
@@ -556,8 +576,8 @@
 	rootEntry = menu;
 	updateListAll();
 	if (currentItem()) {
-		setSelected(currentItem(), hasFocus());
 		scrollToItem(currentItem());
+		setSelected(currentItem(), hasFocus());
 	}
 }
 
@@ -575,8 +595,8 @@
 	while (*it) {
 		item = (ConfigItem *)(*it);
 		if (item->menu == oldroot) {
-			setCurrentItem(item);
 			scrollToItem(item);
+			setCurrentItem(item);
 			break;
 		}
 
@@ -771,6 +791,8 @@
 	case Qt::Key_Y:
 		setValue(item, yes);
 		break;
+	case Qt::Key_Left:
+		CollapseParent();
 	default:
 		Parent::keyPressEvent(ev);
 		return;
@@ -886,15 +908,26 @@
 {
 	if (!headerPopup) {
 		QAction *action;
-
 		headerPopup = new QMenu(this);
-		action = new QAction("Show Name", this);
-		action->setCheckable(true);
-		connect(action, &QAction::toggled,
-			this, &ConfigList::setShowName);
-		connect(this, &ConfigList::showNameChanged,
-			action, &QAction::setChecked);
-		action->setChecked(showName);
+
+		action = new QAction("-- Disable Tree", this);
+		connect(action, &QAction::triggered, this, &ConfigList::setAllOff);
+		headerPopup->addAction(action);
+
+		action = new QAction("Enable Tree ++", this);
+		connect(action, &QAction::triggered, this, &ConfigList::setAllOn);
+		headerPopup->addAction(action);
+
+		action = new QAction("<- Collapse Tree", this);
+		connect(action, &QAction::triggered, this, &ConfigList::CollapseOneTree);
+		headerPopup->addAction(action);
+
+		action = new QAction("Expand Tree ->", this);
+		connect(action, &QAction::triggered, this, &ConfigList::ExpandOneTree);
+		headerPopup->addAction(action);
+
+		action = new QAction("Collapse <- Parent", this);
+		connect(action, &QAction::triggered, this, &ConfigList::CollapseParent);
 		headerPopup->addAction(action);
 	}
 
@@ -909,7 +942,17 @@
 
 	showName = on;
 	reinit();
-	emit showNameChanged(on);
+//	emit showNameChanged(on);
+}
+
+void ConfigList::setshowColors(bool on)
+{
+	if (showColors == on)
+		return;
+
+	showColors = on;
+	reinit();
+//	emit showColorsChanged(on);
 }
 
 QList<ConfigList *> ConfigList::allLists;
@@ -917,6 +960,167 @@
 QAction *ConfigList::showAllAction;
 QAction *ConfigList::showPromptAction;
 
+
+/*
+	ConfigItem* firstChild() const
+	{
+		return (ConfigItem *)Parent::child(0);
+	}
+	ConfigItem* nextSibling()
+	{
+		ConfigItem *ret = NULL;
+		ConfigItem *_parent = (ConfigItem *)parent();
+
+		if(_parent) {
+			ret = (ConfigItem *)_parent->child(_parent->indexOfChild(this)+1);
+		} else {
+			QTreeWidget *_treeWidget = treeWidget();
+			ret = (ConfigItem *)_treeWidget->topLevelItem(_treeWidget->indexOfTopLevelItem(this)+1);
+		}
+
+		return ret;
+	}
+	*/
+
+//starts from the root dir (parent=null), topleveldir=1
+//recurses down indents right, selecting everything turning everything on and expanding sections
+//eventually stops when new parent = orig parent = NULL = top of tree, and last expected = next sibling
+void ConfigList::setAllOn()
+{
+	QTreeWidgetItem* i = currentItem();
+	ConfigItem* item = (ConfigItem*)i;
+	ConfigItem* last = item->nextSibling();
+	int done = 0;
+	int seenParentNonNull = 0;
+	int val;
+	int debugPrintf = 0;
+
+//	ConfigItem* nextt = item->nextItem;
+//	struct menu* child = item->menu->list;
+	struct menu* origmenu = item->menu;
+	struct menu* newmenu = item->menu;
+	if (debugPrintf && origmenu && origmenu->sym) {
+		val = sym_get_tristate_value(origmenu->sym);
+		printf("origmenu: %s =  %d \n", origmenu->sym->name, val);
+	}
+
+	struct menu* newpar = item->menu->parent;
+	if (debugPrintf && newpar && newpar->sym) {
+		val = sym_get_tristate_value(newpar->sym);
+		printf("newpar: %s =  %d \n", newpar->sym->name, val);
+	}
+
+	QTreeWidgetItem* newparent = NULL;
+//	QTreeWidgetItem* newparent = item->parent();
+	ConfigItem* newparentitem = (ConfigItem*)newparent;
+
+	QTreeWidgetItemIterator it(i);
+	while (last!=NULL && item != last) {
+
+			//printf("count: %d \n", done);
+			newmenu = item->menu;
+			if (origmenu == newmenu && seenParentNonNull)
+				return;
+			setValue(item,yes);
+			setSelected(item, true);
+			scrollToItem(item);
+			item->setExpanded(true);
+
+			if (debugPrintf && newmenu->sym) {
+				val = sym_get_tristate_value(newmenu->sym);
+				printf("NewMenu: %s =  %d \n", newmenu->sym->name, val);
+			}
+
+			newparent = item->parent();
+			newparentitem = (ConfigItem*)newparent;
+			if (newparentitem != NULL) {
+				seenParentNonNull = 1;
+				if (debugPrintf && newparentitem->menu->sym) {
+					val = sym_get_tristate_value(newparentitem->menu->sym);
+					printf("PARENT: %s =  %d \n", newparentitem->menu->sym->name, val);
+				}
+			}
+
+			++it;
+			item = (ConfigItem*)(QTreeWidgetItem*)(*it);
+			done++;
+	}
+}
+
+void ConfigList::setAllOff()
+{
+	QTreeWidgetItem* i = currentItem();
+	ConfigItem* item = (ConfigItem*)i;
+	ConfigItem* last = item->nextSibling();
+
+	QTreeWidgetItemIterator it(i);
+
+	while (item != last && *it) {
+		setValue(item, no);
+		setSelected(item, true);
+		scrollToItem(item);
+		item->setExpanded(false);
+
+		++it;
+		item = (ConfigItem*)(QTreeWidgetItem*)(*it);
+	}
+}
+
+void ConfigList::CollapseOneTree()
+{
+	QTreeWidgetItem* i = currentItem();
+	ConfigItem* item = (ConfigItem*)i;
+	ConfigItem* last = item->nextSibling();
+
+	QTreeWidgetItemIterator it(i);
+
+	while (item != last && *it) {
+		setSelected(item, false);
+		item->setExpanded(false);
+
+		++it;
+		item = (ConfigItem*)(QTreeWidgetItem*)(*it);
+	}
+}
+
+void ConfigList::ExpandOneTree()
+{
+	QTreeWidgetItem* i = currentItem();
+	ConfigItem* item = (ConfigItem*)i;
+	ConfigItem* last = item->nextSibling();
+
+	QTreeWidgetItemIterator it(i);
+
+	while (item != last && *it) {
+		setSelected(item, true);
+		item->setExpanded(true);
+
+		++it;
+		item = (ConfigItem*)(QTreeWidgetItem*)(*it);
+	}
+}
+
+void ConfigList::CollapseParent()
+{
+	QTreeWidgetItem* i = currentItem();
+	ConfigItem* item = (ConfigItem*)i;
+	ConfigItem* last = (ConfigItem*)item->parent();
+	if (last != NULL) {
+		item = findConfigItem(last->menu);
+		last->setExpanded(false);
+		scrollToItem(item);
+		last->setSelected(true);
+		setCurrentItem(last);
+	}
+}
+
+void ConfigList::ExpandOne()
+{
+	QTreeWidgetItem* i = currentItem();
+	ConfigItem* item = (ConfigItem*)i;
+	item->setExpanded(true);
+}
+
 void ConfigList::setAllOpen(bool open)
 {
 	QTreeWidgetItemIterator it(this);
@@ -1050,7 +1254,7 @@
 		stream << "</b></big><br><br>";
 		if (showDebug()) {
 			if (_menu->prompt->visible.expr) {
-				stream << "&nbsp;&nbsp;dep: ";
+				stream << "&nbsp;&nbsp;Dep: ";
 				expr_print(_menu->prompt->visible.expr,
 					   expr_print_help, &stream, E_NONE);
 				stream << "<br><br>";
@@ -1068,17 +1272,9 @@
 {
 	QString debug;
 	QTextStream stream(&debug);
+	QString oldstring,tempstring;
+	QTextStream tempstream(&tempstring);
 
-	stream << "type: ";
-	stream << print_filter(sym_type_name(sym->type));
-	if (sym_is_choice(sym))
-		stream << " (choice)";
-	debug += "<br>";
-	if (sym->rev_dep.expr) {
-		stream << "reverse dep: ";
-		expr_print(sym->rev_dep.expr, expr_print_help, &stream, E_NONE);
-		stream << "<br>";
-	}
 	for (struct property *prop = sym->prop; prop; prop = prop->next) {
 		switch (prop->type) {
 		case P_PROMPT:
@@ -1113,13 +1309,28 @@
 			stream << "<br>";
 		}
 		if (prop->visible.expr) {
-			stream << "&nbsp;&nbsp;&nbsp;&nbsp;dep: ";
+			oldstring = tempstring;
 			expr_print(prop->visible.expr, expr_print_help,
-				   &stream, E_NONE);
-			stream << "<br>";
+				&tempstream, E_NONE);
+			//only print one  
+			tempstring = tempstream.readLine();
+			if (!tempstring.isEmpty() && tempstring != oldstring) {
+				stream << "&nbsp;&nbsp;&nbsp;&nbsp; dep: ";
+				stream << tempstring;
+				stream << "<br>";
+			}
 		}
 	}
-	stream << "<br>";
+	if (sym->rev_dep.expr) {
+		stream << "reverse dep: ";
+		expr_print(sym->rev_dep.expr, expr_print_help, &stream, E_NONE);
+		stream << "<br>";
+	}
+	stream << "type: ";
+	stream << print_filter(sym_type_name(sym->type));
+	if (sym_is_choice(sym))
+		stream << " (choice)";
+	stream << "<br><br>";
 
 	return debug;
 }
@@ -1161,6 +1372,7 @@
 
 	if (sym && sym->name && !(sym->flags & SYMBOL_CONST)) {
 		*stream << "<a href=\"s" << sym->name << "\">";
+//		*stream << "HELP: " << print_filter(str);
 		*stream << print_filter(str);
 		*stream << "</a>";
 	} else {
@@ -1228,11 +1440,11 @@
 	setWindowTitle("Search Config");
 
 	QVBoxLayout* layout1 = new QVBoxLayout(this);
-	layout1->setContentsMargins(11, 11, 11, 11);
+	//layout1->setContentsMargins(4, 4, 4, 4);
 	layout1->setSpacing(6);
 
 	QHBoxLayout* layout2 = new QHBoxLayout();
-	layout2->setContentsMargins(0, 0, 0, 0);
+	//layout2->setContentsMargins(0, 0, 0, 0);
 	layout2->setSpacing(6);
 	layout2->addWidget(new QLabel("Find:", this));
 	editField = new QLineEdit(this);
@@ -1240,7 +1452,7 @@
 		this, &ConfigSearchWindow::search);
 	layout2->addWidget(editField);
 	searchButton = new QPushButton("Search", this);
-	searchButton->setAutoDefault(false);
+	searchButton->setAutoDefault(true);
 	connect(searchButton, &QPushButton::clicked,
 		this, &ConfigSearchWindow::search);
 	layout2->addWidget(searchButton);
@@ -1324,9 +1536,7 @@
 
 	QDesktopWidget *d = configApp->desktop();
 	snprintf(title, sizeof(title), "%s%s",
-		rootmenu.prompt->text,
-		""
-		);
+		rootmenu.prompt->text,	""	);
 	setWindowTitle(title);
 
 	width = configSettings->value("/window width", d->width() - 64).toInt();
@@ -1354,22 +1564,30 @@
 	split1->setOrientation(Qt::Horizontal);
 	split1->setChildrenCollapsible(false);
 
-	menuList = new ConfigList(widget, "menu");
-
 	split2 = new QSplitter(widget);
+	split2->setOrientation(Qt::Horizontal);
 	split2->setChildrenCollapsible(false);
-	split2->setOrientation(Qt::Vertical);
+
+	split3 = new QSplitter(widget);
+	split3->setOrientation(Qt::Horizontal);
+	split3->setChildrenCollapsible(false);
 
 	// create config tree
 	configList = new ConfigList(widget, "config");
-
+	menuList = new ConfigList(widget, "menu");
 	helpText = new ConfigInfoView(widget, "help");
+	//genr8eofl initiate search config, add to right pane
+	searchConfig();
 
-	layout->addWidget(split2);
-	split2->addWidget(split1);
 	split1->addWidget(configList);
 	split1->addWidget(menuList);
+
 	split2->addWidget(helpText);
+	split2->addWidget(searchWindow);
+
+	split3->addWidget(split1);
+	split3->addWidget(split2);
+	layout->addWidget(split3);
 
 	setTabOrder(configList, helpText);
 	configList->setFocus();
@@ -1398,14 +1616,17 @@
 	// Set saveAction's initial state
 	conf_changed();
 	configname = xstrdup(conf_get_configname());
+	snprintf(title, sizeof(title), "QConf: %s - %s",
+		rootmenu.prompt->text, configname);
+	setWindowTitle(title);
 
 	QAction *saveAsAction = new QAction("Save &As...", this);
 	connect(saveAsAction, &QAction::triggered,
 		this, &ConfigMainWindow::saveConfigAs);
-	QAction *searchAction = new QAction("&Find", this);
-	searchAction->setShortcut(Qt::CTRL + Qt::Key_F);
-	connect(searchAction, &QAction::triggered,
-		this, &ConfigMainWindow::searchConfig);
+	// QAction *searchAction = new QAction("&Find", this);
+	// searchAction->setShortcut(Qt::CTRL + Qt::Key_F);
+	// connect(searchAction, &QAction::triggered,
+	// 	this, &ConfigMainWindow::searchConfig);
 	singleViewAction = new QAction(QPixmap(xpm_single_view), "Single View", this);
 	singleViewAction->setCheckable(true);
 	connect(singleViewAction, &QAction::triggered,
@@ -1425,6 +1646,12 @@
 		configList, &ConfigList::setShowName);
 	showNameAction->setChecked(configList->showName);
 
+	QAction *showColorsAction = new QAction("Show Colors", this);
+	  showColorsAction->setCheckable(true);
+	connect(showColorsAction, &QAction::toggled,
+		configList, &ConfigList::setshowColors);
+	showColorsAction->setChecked(configList->showColors);
+
 	QActionGroup *optGroup = new QActionGroup(this);
 	optGroup->setExclusive(true);
 	connect(optGroup, &QActionGroup::triggered,
@@ -1463,6 +1690,17 @@
 	toolBar->addAction(splitViewAction);
 	toolBar->addAction(fullViewAction);
 
+	//genr8 added expand/collapse icons (text)
+	QAction *expandaction = new QAction("Expand", configList);
+	connect(expandaction, &QAction::triggered,
+		configList, &ConfigList::ExpandOne);
+	toolBar->addAction(expandaction);
+
+	QAction *collapseaction = new QAction("Collapse", configList);
+	connect(collapseaction, &QAction::triggered,
+		configList, &ConfigList::CollapseParent);
+	toolBar->addAction(collapseaction);
+
 	// create file menu
 	QMenu *menu = menuBar()->addMenu("&File");
 	menu->addAction(loadAction);
@@ -1472,16 +1710,17 @@
 	menu->addAction(quitAction);
 
 	// create edit menu
-	menu = menuBar()->addMenu("&Edit");
-	menu->addAction(searchAction);
+	//menu = menuBar()->addMenu("&Edit");
+	//menu->addAction(searchAction);
 
 	// create options menu
 	menu = menuBar()->addMenu("&Option");
-	menu->addAction(showNameAction);
+	menu->addAction(showNameAction); //"Show Name"
+	menu->addAction(showColorsAction); //"Show Colors"
 	menu->addSeparator();
-	menu->addActions(optGroup->actions());
+	menu->addActions(optGroup->actions()); //normal/prompt
 	menu->addSeparator();
-	menu->addAction(showDebugAction);
+	menu->addAction(showDebugAction); //"Show Debug Info"
 
 	// create help menu
 	menu = menuBar()->addMenu("&Help");
@@ -1529,6 +1768,20 @@
 	sizes = configSettings->readSizes("/split2", &ok);
 	if (ok)
 		split2->setSizes(sizes);
+	sizes = configSettings->readSizes("/split3", &ok);
+	if (ok)
+		split3->setSizes(sizes);
+
+	//genr8 manually defined column sizes for 1920x1080 maximized
+	//TODO:Remove Hardcoded Numbers
+	configList->header()->setMinimumSectionSize(35);
+	configList->header()->resizeSection(0 /*column index*/, 710 /*width*/);
+	configList->header()->resizeSection(1 /*column index*/, 220 /*width*/);
+	configList->header()->resizeSection(2 /*column index*/, 35 /*width*/);
+	// You might also need to use this if you want to limit the size of your last column:
+	configList->header()->setStretchLastSection(false);
+	configList->setWordWrap(false);
+
 }
 
 void ConfigMainWindow::loadConfig(void)
@@ -1550,7 +1803,7 @@
 	free(configname);
 	configname = xstrdup(name);
 
-	ConfigList::updateListAllForAll();
+	ConfigList::updateListForAll();
 }
 
 bool ConfigMainWindow::saveConfig(void)
@@ -1650,19 +1903,26 @@
 	}
 
 	if (list) {
-		item = list->findConfigItem(menu);
+		item = configList->findConfigItem(menu);
 		if (item) {
-			list->setSelected(item, true);
-			list->scrollToItem(item);
-			list->setFocus();
-			helpText->setInfo(menu);
+			configList->clearSelection();
+			configList->scrollToItem(item);
+//			configList->setSelected(item, true);
+			QTimer::singleShot(2, [list,item]{list->setSelected(item, true);});
+			configList->setFocus();
+			configList->scrollToItem(item);
+
+//			QTimer::singleShot(0, [list,item]{list->setFocus();});
+			emit configList->gotFocus(menu);
+//TODO: Allow this to re-set the screen we came from , or not.
+//			helpText->setInfo(menu);
 		}
 	}
 }
 
 void ConfigMainWindow::listFocusChanged(void)
 {
-	if (menuList->mode == menuMode)
+//	if (menuList->mode == menuMode)
 		configList->clearSelection();
 }
 
@@ -1711,11 +1971,11 @@
 		configList->updateListAll();
 	else
 		configList->setRootMenu(&rootmenu);
-	configList->setAllOpen(true);
+	configList->setAllOpen(false);
 	configApp->processEvents();
 	menuList->mode = symbolMode;
 	menuList->setRootMenu(&rootmenu);
-	menuList->setAllOpen(true);
+	menuList->setAllOpen(false);
 	menuList->show();
 	menuList->setFocus();
 }
@@ -1738,6 +1998,7 @@
 		configList->updateListAll();
 	else
 		configList->setRootMenu(&rootmenu);
+	menuList->setAllOpen(false);
 	configList->setFocus();
 }
 
@@ -1801,6 +2062,7 @@
 {
 	static const QString str = "qconf is Copyright (C) 2002 Roman Zippel <zippel@linux-m68k.org>.\n"
 		"Copyright (C) 2015 Boris Barbulovski <bbarbulovski@gmail.com>.\n"
+		"Copyright (C) 2022 genr8eofl @ BTC me.\n"
 		"\n"
 		"Bug reports and feature request can also be entered at http://bugzilla.kernel.org/\n"
 		"\n"
@@ -1837,6 +2099,7 @@
 
 	configSettings->writeSizes("/split1", split1->sizes());
 	configSettings->writeSizes("/split2", split2->sizes());
+	configSettings->writeSizes("/split3", split2->sizes());	
 }
 
 void ConfigMainWindow::conf_changed(void)
@@ -1866,6 +2129,7 @@
 static void usage(void)
 {
 	printf("%s [-s] <config>\n", progname);
+	printf("qconf: -s switch = silent, <config> should be /usr/src/linux/Kconfig \n");
 	exit(0);
 }
 

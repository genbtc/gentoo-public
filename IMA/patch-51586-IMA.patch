commit e6f1d9b1cf10d3d444eabbf3a7ce420f778ca3fd
Author: genbtc <genbtc@gmx.com>
Date:   Tue Jan 3 16:56:28 2023 -0500

    IMA-patch

diff --git a/security/integrity/digsig.c b/security/integrity/digsig.c
index aa93b750a..a6b13ac58 100644
--- a/security/integrity/digsig.c
+++ b/security/integrity/digsig.c
@@ -111,7 +111,7 @@ static int __init __integrity_init_keyring(const unsigned int id,
 	} else {
 		if (id == INTEGRITY_KEYRING_PLATFORM)
 			set_platform_trusted_keys(keyring[id]);
-		if (id == INTEGRITY_KEYRING_IMA)
+		if (id == INTEGRITY_KEYRING_IMA || id == INTEGRITY_KEYRING_EVM)
 			load_module_cert(keyring[id]);
 	}
 
diff --git a/security/integrity/ima/ima.h b/security/integrity/ima/ima.h
index be965a871..9166aa582 100644
--- a/security/integrity/ima/ima.h
+++ b/security/integrity/ima/ima.h
@@ -295,6 +295,7 @@ void ima_update_policy(void);
 void ima_update_policy_flags(void);
 ssize_t ima_parse_add_rule(char *);
 void ima_delete_rules(void);
+void ima_delete_existing_rules(void);
 int ima_check_policy(void);
 void *ima_policy_start(struct seq_file *m, loff_t *pos);
 void *ima_policy_next(struct seq_file *m, void *v, loff_t *pos);
diff --git a/security/integrity/ima/ima_fs.c b/security/integrity/ima/ima_fs.c
index 3ad8f7734..0b9bcc1a8 100644
--- a/security/integrity/ima/ima_fs.c
+++ b/security/integrity/ima/ima_fs.c
@@ -311,6 +311,20 @@ static ssize_t ima_read_policy(char *path)
 		return pathlen;
 }
 
+int ima_autoload_policy(char *filename)
+{
+      int result;
+
+      result = mutex_lock_interruptible(&ima_write_mutex);
+      if (result < 0)
+              return -EADDRINUSE;
+      if (filename[0] == '/')
+              result = ima_read_policy(filename);
+      mutex_unlock(&ima_write_mutex);
+
+      return result;
+}
+
 static ssize_t ima_write_policy(struct file *file, const char __user *buf,
 				size_t datalen, loff_t *ppos)
 {
@@ -337,6 +351,11 @@ static ssize_t ima_write_policy(struct file *file, const char __user *buf,
 
 	if (data[0] == '/') {
 		result = ima_read_policy(data);
+	//This CLEAR word is kind of like a p@ss word really;
+	} else if (strcmp(data, "CLEAR") == 0) {
+		ima_delete_existing_rules();
+		pr_info("IMA Policy cleared!\n");
+		result = datalen;
 	} else if (ima_appraise & IMA_APPRAISE_POLICY) {
 		pr_err("signed policy file (specified as an absolute pathname) required\n");
 		integrity_audit_msg(AUDIT_INTEGRITY_STATUS, NULL, NULL,
@@ -363,6 +382,7 @@ static struct dentry *ascii_runtime_measurements;
 static struct dentry *runtime_measurements_count;
 static struct dentry *violations;
 static struct dentry *ima_policy;
+static struct dentry *ima_secfs_appraise_mode;
 
 enum ima_fs_flags {
 	IMA_FS_BUSY,
@@ -409,7 +429,7 @@ static int ima_open_policy(struct inode *inode, struct file *filp)
  */
 static int ima_release_policy(struct inode *inode, struct file *file)
 {
-	const char *cause = valid_policy ? "completed" : "failed";
+	const char *cause = valid_policy ? "Completed" : "Failed";
 
 	if ((file->f_flags & O_ACCMODE) == O_RDONLY)
 		return seq_release(inode, file);
@@ -419,7 +439,7 @@ static int ima_release_policy(struct inode *inode, struct file *file)
 		valid_policy = 0;
 	}
 
-	pr_info("policy update %s\n", cause);
+	pr_info("Policy Update %s\n", cause);
 	integrity_audit_msg(AUDIT_INTEGRITY_STATUS, NULL, NULL,
 			    "policy_update", cause, !valid_policy, 0);
 
@@ -450,6 +470,52 @@ static const struct file_operations ima_measure_policy_ops = {
 	.llseek = generic_file_llseek,
 };
 
+static ssize_t ima_get_appraise_mode(struct file *filp, char __user *buf,
+                            size_t count, loff_t *ppos)
+{
+        char temp[80];
+        ssize_t rc;
+
+        if (*ppos != 0)
+                return 0;
+
+        sprintf(temp, "%d", ima_appraise );
+        rc = simple_read_from_buffer(buf, count, ppos, temp, strlen(temp));
+
+        return rc;
+}
+
+static ssize_t ima_set_appraise_mode(struct file *file, const char __user *buf,
+                             size_t count, loff_t *ppos)
+{
+        unsigned int i;
+        int ret;
+
+        if (!capable(CAP_SYS_ADMIN) || (evm_initialized & EVM_SETUP_COMPLETE))
+                return -EPERM;
+
+        ret = kstrtouint_from_user(buf, count, 0, &i);
+
+        if (ret)
+                return ret;
+
+        /* Reject invalid values
+        IMA_APPRAISE_ENFORCE    0x01
+        IMA_APPRAISE_FIX        0x02
+        IMA_APPRAISE_LOG        0x04
+        */
+        if ((i & ~(IMA_APPRAISE_ENFORCE | IMA_APPRAISE_FIX | IMA_APPRAISE_LOG | 0)) != 0)
+                return -EINVAL;
+
+        ima_appraise = i;
+        return count;
+}
+
+static const struct file_operations ima_secfs_appraise_mode_ops = {
+        .read = ima_get_appraise_mode,
+        .write = ima_set_appraise_mode,
+};
+
 int __init ima_fs_init(void)
 {
 	ima_dir = securityfs_create_dir("ima", integrity_dir);
@@ -494,6 +560,12 @@ int __init ima_fs_init(void)
 	if (IS_ERR(ima_policy))
 		goto out;
 
+        ima_secfs_appraise_mode = securityfs_create_file("mode",
+                                S_IRUSR | S_IRGRP, ima_dir, NULL,
+                                &ima_secfs_appraise_mode_ops);
+        if (IS_ERR(ima_secfs_appraise_mode))
+                securityfs_remove(ima_secfs_appraise_mode);
+
 	return 0;
 out:
 	securityfs_remove(ima_policy);
diff --git a/security/integrity/ima/ima_init.c b/security/integrity/ima/ima_init.c
index b26fa6747..d1ac080cd 100644
--- a/security/integrity/ima/ima_init.c
+++ b/security/integrity/ima/ima_init.c
@@ -47,12 +47,9 @@ static int __init ima_add_boot_aggregate(void)
 	struct integrity_iint_cache tmp_iint, *iint = &tmp_iint;
 	struct ima_event_data event_data = { .iint = iint,
 					     .filename = boot_aggregate_name };
+	struct ima_max_digest_data hash;
 	int result = -ENOMEM;
 	int violation = 0;
-	struct {
-		struct ima_digest_data hdr;
-		char digest[TPM_MAX_DIGEST_SIZE];
-	} hash;
 
 	memset(iint, 0, sizeof(*iint));
 	memset(&hash, 0, sizeof(hash));
@@ -105,6 +102,7 @@ static int __init ima_add_boot_aggregate(void)
 void __init ima_load_x509(void)
 {
 	int unset_flags = ima_policy_flag & IMA_APPRAISE;
+	int rc;
 
 	ima_policy_flag &= ~unset_flags;
 	integrity_load_x509(INTEGRITY_KEYRING_IMA, CONFIG_IMA_X509_PATH);
@@ -113,6 +111,12 @@ void __init ima_load_x509(void)
 	evm_load_x509();
 
 	ima_policy_flag |= unset_flags;
+
+	rc = ima_autoload_policy("/etc/imapolicy.custom-load.conf");
+	if (rc == 0) {
+		ima_update_policy();
+		pr_info("ima_load_x509(): IMA custom policy updated!\n");
+	}
 }
 #endif
 
diff --git a/security/integrity/ima/ima_policy.c b/security/integrity/ima/ima_policy.c
index ed43d3068..2600ce4e7 100644
--- a/security/integrity/ima/ima_policy.c
+++ b/security/integrity/ima/ima_policy.c
@@ -1769,6 +1769,21 @@ void ima_delete_rules(void)
 	}
 }
 
+void ima_delete_existing_rules(void)
+{
+        struct ima_rule_entry *entry, *tmp;
+
+        temp_ima_appraise = 0;
+        rcu_read_lock();
+        list_for_each_entry_safe(entry, tmp, &ima_policy_rules, list) {
+                list_del(&entry->list);
+                ima_free_rule(entry);
+        }
+        rcu_read_unlock();
+        ima_appraise = 0;
+        ima_policy_flag = 0;
+}
+
 #define __ima_hook_stringify(func, str)	(#func),
 
 const char *const func_tokens[] = {
diff --git a/security/integrity/integrity.h b/security/integrity/integrity.h
index 547425c20..17b8cd160 100644
--- a/security/integrity/integrity.h
+++ b/security/integrity/integrity.h
@@ -283,3 +283,5 @@ static inline void __init add_to_platform_keyring(const char *source,
 {
 }
 #endif
+
+int ima_autoload_policy(char *filename);
diff --git a/security/lockdown/lockdown.c b/security/lockdown/lockdown.c
index 87cbdc64d..50679405b 100644
--- a/security/lockdown/lockdown.c
+++ b/security/lockdown/lockdown.c
@@ -29,8 +29,9 @@ static int lock_kernel_down(const char *where, enum lockdown_reason level)
 		return -EPERM;
 
 	kernel_locked_down = level;
-	pr_notice("Kernel is locked down from %s; see man kernel_lockdown.7\n",
-		  where);
+	pr_notice("Lockdown: Enabling [%s](%d) lockdown mode.\n",
+		  lockdown_reasons[kernel_locked_down], kernel_locked_down);
+	pr_notice("Lockdown: Reason: %s; man kernel_lockdown.7 !\n", where);
 	return 0;
 }
 
@@ -58,13 +59,14 @@ early_param("lockdown", lockdown_param);
 static int lockdown_is_locked_down(enum lockdown_reason what)
 {
 	if (WARN(what >= LOCKDOWN_CONFIDENTIALITY_MAX,
-		 "Invalid lockdown reason"))
+		"Error: Invalid state, Lockdown enum MAX bounds check failed!"))
 		return -EPERM;
 
 	if (kernel_locked_down >= what) {
 		if (lockdown_reasons[what])
-			pr_notice("Lockdown: %s: %s is restricted; see man kernel_lockdown.7\n",
-				  current->comm, lockdown_reasons[what]);
+			pr_info_ratelimited("Lockdown: Permission \"%s\" "
+				"denied!(-%d) Restricted program: [%s] \n",
+				lockdown_reasons[what], (kernel_locked_down-what), current->comm);
 		return -EPERM;
 	}
 
@@ -78,9 +80,9 @@ static struct security_hook_list lockdown_hooks[] __lsm_ro_after_init = {
 static int __init lockdown_lsm_init(void)
 {
 #if defined(CONFIG_LOCK_DOWN_KERNEL_FORCE_INTEGRITY)
-	lock_kernel_down("Kernel configuration", LOCKDOWN_INTEGRITY_MAX);
+	lock_kernel_down("Kernel .config", LOCKDOWN_INTEGRITY_MAX);
 #elif defined(CONFIG_LOCK_DOWN_KERNEL_FORCE_CONFIDENTIALITY)
-	lock_kernel_down("Kernel configuration", LOCKDOWN_CONFIDENTIALITY_MAX);
+	lock_kernel_down("Kernel .config", LOCKDOWN_CONFIDENTIALITY_MAX);
 #endif
 	security_add_hooks(lockdown_hooks, ARRAY_SIZE(lockdown_hooks),
 			   "lockdown");
@@ -134,7 +136,7 @@ static ssize_t lockdown_write(struct file *file, const char __user *buf,
 		const char *label = lockdown_reasons[level];
 
 		if (label && !strcmp(state, label))
-			err = lock_kernel_down("securityfs", level);
+			err = lock_kernel_down("echo > securityfs", level);
 	}
 
 	kfree(state);
diff --git a/security/security.c b/security/security.c
index 7b9f9d3ff..d9507deb4 100644
--- a/security/security.c
+++ b/security/security.c
@@ -235,9 +235,9 @@ static void __init initialize_lsm(struct lsm_info *lsm)
 	if (is_enabled(lsm)) {
 		int ret;
 
-		init_debug("initializing %s\n", lsm->name);
+		init_debug("Initializing LSM %s\n", lsm->name);
 		ret = lsm->init();
-		WARN(ret, "%s failed to initialize: %d\n", lsm->name, ret);
+		WARN(ret, "%s failed to initialize LSM: %d\n", lsm->name, ret);
 	}
 }
 
@@ -394,7 +394,7 @@ int __init security_init(void)
 {
 	struct lsm_info *lsm;
 
-	pr_info("Security Framework initializing\n");
+	pr_info("Security Framework initializing...\n");
 
 	/*
 	 * Append the names of the early LSM modules now that kmalloc() is

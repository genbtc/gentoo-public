#!/usr/bin/env bash
# Shamelessly "borrowed" from Arch to make Gentoo development in chroots easier;
# Thanks for doing all of the hard work!

# Usage:
#   Run this script with either flags or appropriate ENVVARS set and provide it with the directory
#   that you want to chroot into, and it will handle all of the tedium.

# Options:
#   -b | --bind-binpkgs | MOUNT_BINPKGS
#   -d | --debug
#   -k | --no-bind-kernel | NO_MOUNT_KERNEL_SOURCE=1
#   -m | --bind-makeconf | MOUNT_MAKECONF
#   -n | --no-bashrc | NO_MOUNT_BASHRC
#   -N | --unshare
#   -r | --bind-hostrepos | MOUNT_HOSTREPOS
#   -u | --user | USERSPEC=user[:group]

shopt -s extglob

# generated from util-linux source: libmount/src/utils.c
declare -A pseudofs_types=([anon_inodefs]=1
                           [apparmorfs]=1
                           [autofs]=1
                           [bdev]=1
                           [binder]=1
                           [binfmt_misc]=1
                           [bpf]=1
                           [cgroup]=1
                           [cgroup2]=1
                           [configfs]=1
                           [cpuset]=1
                           [debugfs]=1
                           [devfs]=1
                           [devpts]=1
                           [devtmpfs]=1
                           [dlmfs]=1
                           [dmabuf]=1
                           [drm]=1
                           [efivarfs]=1
                           [fuse]=1
                           [fuse.archivemount]=1
                           [fuse.avfsd]=1
                           [fuse.dumpfs]=1
                           [fuse.encfs]=1
                           [fuse.gvfs-fuse-daemon]=1
                           [fuse.gvfsd-fuse]=1
                           [fuse.lxcfs]=1
                           [fuse.rofiles-fuse]=1
                           [fuse.vmware-vmblock]=1
                           [fuse.xwmfs]=1
                           [fusectl]=1
                           [hugetlbfs]=1
                           [ipathfs]=1
                           [mqueue]=1
                           [nfsd]=1
                           [none]=1
                           [nsfs]=1
                           [overlay]=1
                           [pipefs]=1
                           [proc]=1
                           [pstore]=1
                           [ramfs]=1
                           [resctrl]=1
                           [rootfs]=1
                           [rpc_pipefs]=1
                           [securityfs]=1
                           [selinuxfs]=1
                           [smackfs]=1
                           [sockfs]=1
                           [spufs]=1
                           [sysfs]=1
                           [tmpfs]=1
                           [tracefs]=1
                           [vboxsf]=1
                           [virtiofs]=1)

# generated from: pkgfile -vbr '/fsck\..+' | awk -F. '{ print $NF }' | sort
declare -A fsck_types=([btrfs]=1
                       [cramfs]=1
                       [erofs]=1
                       [exfat]=1
                       [ext2]=1
                       [ext3]=1
                       [ext4]=1
                       [f2fs]=1
                       [fat]=1
                       [jfs]=1
                       [minix]=1
                       [msdos]=1
                       [reiserfs]=1
                       [vfat]=1
                       [xfs]=1)

out() { printf "$1 $2\n" "${@:3}"; }
error() { out "==> \033[1;31mERROR\033[0m:" "$@"; } >&2
warning() { out "==> \033[1;33mWARNING\033[0m:" "$@"; } >&2
msg() { out "==>" "$@"; }
msg2() { out "  ->" "$@";}
die() { error "$@"; exit 1; }

ignore_error() {
  "$@" 2>/dev/null
  return 0
}

in_array() {
  local i
  for i in "${@:2}"; do
    [[ $1 = "$i" ]] && return 0
  done
  return 1
}

chroot_add_mount() {
  mount "$@" && CHROOT_ACTIVE_MOUNTS=("$2" "${CHROOT_ACTIVE_MOUNTS[@]}")
}

chroot_maybe_add_mount() {
  local cond=$1; shift
  if eval "$cond"; then
    chroot_add_mount "$@"
  fi
}

chroot_setup() {
  CHROOT_ACTIVE_MOUNTS=()
  [[ $(trap -p EXIT) ]] && die '(BUG): attempting to overwrite existing EXIT trap'
  trap 'chroot_teardown' EXIT

  chroot_add_mount proc "$1/proc" -t proc -o nosuid,noexec,nodev &&
  chroot_add_mount sys "$1/sys" -t sysfs -o nosuid,noexec,nodev,ro &&
  ignore_error chroot_maybe_add_mount "[[ -d '$1/sys/firmware/efi/efivars' ]]" \
      efivarfs "$1/sys/firmware/efi/efivars" -t efivarfs -o nosuid,noexec,nodev &&
  chroot_add_mount udev "$1/dev" -t devtmpfs -o mode=0755,nosuid &&
  chroot_add_mount devpts "$1/dev/pts" -t devpts -o mode=0620,gid=5,nosuid,noexec &&
  chroot_add_mount shm "$1/dev/shm" -t tmpfs -o mode=1777,nosuid,nodev &&
  chroot_add_mount run "$1/run" -t tmpfs -o nosuid,nodev,mode=0755 &&
  chroot_add_mount tmp "$1/tmp" -t tmpfs -o mode=1777,strictatime,nodev,nosuid
}

chroot_teardown() {
  if (( ${#CHROOT_ACTIVE_MOUNTS[@]} )); then
    umount "${CHROOT_ACTIVE_MOUNTS[@]}"
  fi
  unset CHROOT_ACTIVE_MOUNTS
}

chroot_add_mount_lazy() {
  mount "$@" && CHROOT_ACTIVE_LAZY=("$2" "${CHROOT_ACTIVE_LAZY[@]}")
}

chroot_bind_device() {
  local DEVICE="${CHROOT_DIR}/$1"
  touch "${DEVICE}" && CHROOT_ACTIVE_FILES=("${DEVICE}" "${CHROOT_ACTIVE_FILES[@]}")
  chroot_add_mount $1 "${DEVICE}" --bind
}

chroot_add_link() {
  ln -sf "$1" "$2" && CHROOT_ACTIVE_FILES=("$2" "${CHROOT_ACTIVE_FILES[@]}")
}

unshare_setup() {
  CHROOT_ACTIVE_MOUNTS=()
  CHROOT_ACTIVE_LAZY=()
  CHROOT_ACTIVE_FILES=()
  [[ $(trap -p EXIT) ]] && die '(BUG): attempting to overwrite existing EXIT trap'
  trap 'unshare_teardown' EXIT

  chroot_add_mount_lazy "${CHROOT_DIR}" "${CHROOT_DIR}" --bind &&
  chroot_add_mount proc "${CHROOT_DIR}/proc" -t proc -o nosuid,noexec,nodev &&
  chroot_add_mount_lazy /sys "${CHROOT_DIR}/sys" --rbind &&
  chroot_add_link "${CHROOT_DIR}/proc/self/fd" "${CHROOT_DIR}/dev/fd" &&
  chroot_add_link "${CHROOT_DIR}/proc/self/fd/0" "${CHROOT_DIR}/dev/stdin" &&
  chroot_add_link "${CHROOT_DIR}/proc/self/fd/CHROOT_DIR" "${CHROOT_DIR}/dev/stdout" &&
  chroot_add_link "${CHROOT_DIR}/proc/self/fd/2" "${CHROOT_DIR}/dev/stderr" &&
  chroot_bind_device /dev/full &&
  chroot_bind_device /dev/null &&
  chroot_bind_device /dev/random &&
  chroot_bind_device /dev/tty &&
  chroot_bind_device /dev/urandom &&
  chroot_bind_device /dev/zero &&
  chroot_add_mount run "${CHROOT_DIR}/run" -t tmpfs -o nosuid,nodev,mode=0755 &&
  chroot_add_mount tmp "${CHROOT_DIR}/tmp" -t tmpfs -o mode=1777,strictatime,nodev,nosuid
}

unshare_teardown() {
  chroot_teardown

  if (( ${#CHROOT_ACTIVE_LAZY[@]} )); then
    umount --lazy "${CHROOT_ACTIVE_LAZY[@]}"
  fi
  unset CHROOT_ACTIVE_LAZY

  if (( ${#CHROOT_ACTIVE_FILES[@]} )); then
    rm "${CHROOT_ACTIVE_FILES[@]}"
  fi
  unset CHROOT_ACTIVE_FILES
}

PID_UNSHARE="unshare --fork --pid"
MOUNT_UNSHARE="$PID_UNSHARE --mount --map-auto --map-root-user --setuid 0 --setgid 0"

# This outputs code for declaring all variables to stdout. For example, if
# FOO=BAR, then running
#     declare -p FOO
# will result in the output
#     declare -- FOO="bar"
# This function may be used to re-declare all currently used variables and
# functions in a new shell.
declare_all() {
  # Remove read-only variables to avoid warnings. Unfortunately, declare +r -p
  # doesn't work like it looks like it should (declaring only read-write
  # variables). However, declare -rp will print out read-only variables, which
  # we can then use to remove those definitions.
  declare -p | grep -Fvf <(declare -rp)
  # Then declare functions
  declare -pf
}

try_cast() (
  _=$(( $1#$2 ))
) 2>/dev/null

valid_number_of_base() {
  local base=$1 len=${#2} i=

  for (( i = 0; i < len; i++ )); do
    try_cast "$base" "${2:i:1}" || return 1
  done

  return 0
}

mangle() {
  local i= chr= out=
  local {a..f}= {A..F}=

  for (( i = 0; i < ${#1}; i++ )); do
    chr=${1:i:1}
    case $chr in
      [[:space:]\\])
        printf -v chr '%03o' "'$chr"
        out+=\\
        ;;
    esac
    out+=$chr
  done

  printf '%s' "$out"
}

unmangle() {
  local i= chr= out= len=$(( ${#1} - 4 ))
  local {a..f}= {A..F}=

  for (( i = 0; i < len; i++ )); do
    chr=${1:i:1}
    case $chr in
      \\)
        if valid_number_of_base 8 "${1:i+1:3}" ||
            valid_number_of_base 16 "${1:i+1:3}"; then
          printf -v chr '%b' "${1:i:4}"
          (( i += 3 ))
        fi
        ;;
    esac
    out+=$chr
  done

  printf '%s' "$out${1:i}"
}

optstring_match_option() {
  local candidate pat patterns

  IFS=, read -ra patterns <<<"$1"
  for pat in "${patterns[@]}"; do
    if [[ $pat = *=* ]]; then
      # "key=val" will only ever match "key=val"
      candidate=$2
    else
      # "key" will match "key", but also "key=anyval"
      candidate=${2%%=*}
    fi

    [[ $pat = "$candidate" ]] && return 0
  done

  return 1
}

optstring_remove_option() {
  local o options_ remove=$2 IFS=,

  read -ra options_ <<<"${!1}"

  for o in "${!options_[@]}"; do
    optstring_match_option "$remove" "${options_[o]}" && unset 'options_[o]'
  done

  declare -g "$1=${options_[*]}"
}

optstring_normalize() {
  local o options_ norm IFS=,

  read -ra options_ <<<"${!1}"

  # remove empty fields
  for o in "${options_[@]}"; do
    [[ $o ]] && norm+=("$o")
  done

  # avoid empty strings, reset to "defaults"
  declare -g "$1=${norm[*]:-defaults}"
}

optstring_append_option() {
  if ! optstring_has_option "$1" "$2"; then
    declare -g "$1=${!1},$2"
  fi

  optstring_normalize "$1"
}

optstring_prepend_option() {
  local options_=$1

  if ! optstring_has_option "$1" "$2"; then
    declare -g "$1=$2,${!1}"
  fi

  optstring_normalize "$1"
}

optstring_get_option() {
  local opts o

  IFS=, read -ra opts <<<"${!1}"
  for o in "${opts[@]}"; do
    if optstring_match_option "$2" "$o"; then
      declare -g "$o"
      return 0
    fi
  done

  return 1
}

optstring_has_option() {
  local "${2%%=*}"

  optstring_get_option "$1" "$2"
}

dm_name_for_devnode() {
  read dm_name <"/sys/class/block/${1#/dev/}/dm/name"
  if [[ $dm_name ]]; then
    printf '/dev/mapper/%s' "$dm_name"
  else
    # don't leave the caller hanging, just print the original name
    # along with the failure.
    error 'Failed to resolve device mapper name for: %s' "$1"
  fi
}

fstype_is_pseudofs() {
  (( pseudofs_types["$1"] ))
}

fstype_has_fsck() {
  (( fsck_types["$1"] ))
}

resolve_link() {
  local target=$1
  local root=$2

  # If a root was given, make sure it ends in a slash.
  [[ -n $root && $root != */ ]] && root=$root/

  while [[ -L $target ]]; do
    target=$(readlink -m "$target")
    # If a root was given, make sure the target is under it.
    # Make sure to strip any leading slash from target first.
    [[ -n $root && $target != $root* ]] && target=$root${target#/}
  done

  printf %s "$target"
}

# Mount arbitrary files into your chroot
# usage: chroot_add_file src-file[:dst-file]
# gets CHROOT_DIR from environment
chroot_add_file() {
  local SRC_FILE
  local DST_FILE
  if [[ "${1}" == *:* ]]; then
    # Bind src -> dest
    SRC_FILE=${1%:*}
    DST_FILE=${1#*:}
    SRC_FILE=$(resolve_link "${SRC_FILE}")
    DST_FILE=$(resolve_link "${CHROOT_DIR}/${DST_FILE}" "${CHROOT_DIR}")
  else
    SRC_FILE=$(resolve_link "${1}")
    DST_FILE=$(resolve_link "$CHROOT_DIR/$1" "$CHROOT_DIR")
  fi

  # If we don't have a source file, there's nothing useful we can do.
  [[ -e ${SRC_FILE} ]] || return 0

  if [[ ! -e $DST_FILE ]]; then
    # There are two reasons the destination might not exist:
    #
    #   1. There may be no destination file in the chroot.  In this case, $DST_FILE won't exist,
    #      and it will be equal to $CHROOT_DIR/$1.  In this case, we'll just exit.
    #
    #   2. $1/$2 is (or resolves to) a broken link.  The environment
    #      clearly intends for there to be a file here, but something's wrong.  Maybe it
    #      normally creates the target at boot time.  We'll (try to) take care of it by
    #      creating a dummy file at the target, so that we have something to bind to.

    # Case 1.
    [[ ${DST_FILE} = "${CHROOT_DIR}/${1}" ]] && return 0

    # Case 2.
    install -Dm644 /dev/null "${DST_FILE}" || return 1
  fi

  chroot_add_mount "${SRC_FILE}" "${DST_FILE}" --bind
}

gentoo-chroot() {
  (( EUID == 0 )) || die "This script must be run with root privileges"

  [[ -d $CHROOT_DIR ]] || die "Can't create chroot on non-directory %s" "$CHROOT_DIR"

  $SETUP "$CHROOT_DIR" || die "failed to setup chroot %s" "$CHROOT_DIR"

  local CHROOT_FILES=( )
  # Allow the use of $ADDITIONAL_CHROOT_FILES to mount arbirary files from a running env
  if [ ! ${#ADDITIONAL_CHROOT_FILES[@]} -eq 0 ]; then
    $CHROOT_FILES=$ADDITIONAL_CHROOT_FILES
  fi
  CHROOT_FILES+=( "/etc/resolv.conf" )
  if [ -z ${NO_MOUNT_BASHRC+x} ]; then
    # Grab our bashrc which does useful gentoo functions like env-update and setting $PS1
    CHROOT_FILES+=( "${FILES_DIR}/bashrc:/root/.bashrc" )
  fi
  if ! [ -z ${MOUNT_MAKECONF+x} ]; then
    CHROOT_FILES+=( "/etc/portage/make.conf" )
  fi

  for FILE in ${CHROOT_FILES[@]}; do
      chroot_add_file "${FILE}" || die "failed to setup ${FILE}"
  done

  # Try and avoid redundant downloads by bringing in distfiles from our host
  chroot_bind_device /var/cache/distfiles "${CHROOT_DIR}/var/cache/distfiles"

  # Honour user flags or envvars
  if ! [ -z ${MOUNT_KERNEL_SOURCE+x} ]; then
    chroot_bind_device /usr/src/linux "${CHROOT_DIR}/usr/src/linux"
  fi
  if ! [ -z ${MOUNT_HOST_REPOS+x} ]; then
    chroot_bind_device /etc/portage/repos.conf "${CHROOT_DIR}/etc/portage/repos.conf"
    chroot_bind_device /var/db/repos "${CHROOT_DIR}/var/db/repos"
  else
    chroot_bind_device /var/db/repos/gentoo "${CHROOT_DIR}/var/db/repos/gentoo"
  fi
  if [ -d "/var/cache/binpkgs"  ] && ! [ -z ${MOUNT_BINPKGS+x} ]; then
    chroot_bind_device /var/cache/binpkgs "${CHROOT_DIR}/var/cache/binpkgs"
  fi

  if ! mountpoint -q "$CHROOT_DIR"; then
    warning "$CHROOT_DIR is not a mountpoint. This may have undesirable side effects."
  fi

  CHROOT_ARGS=()
  [[ $USERSPEC ]] && CHROOT_ARGS+=(--userspec "$USERSPEC")
  if [ ${#ARGS[@]} -eq 0 ]; then
    SHELL=/bin/bash $PID_UNSHARE chroot "${CHROOT_ARGS[@]}" -- "$CHROOT_DIR"
  else
    $PID_UNSHARE chroot "${CHROOT_ARGS[@]}" -- "$CHROOT_DIR" "${ARGS[@]}"/bin/bash -c "source /etc/profile && env-update && ${args[@]}"
  fi
}

# Default to chroot; do unshare if user requests it
SETUP=chroot_setup

usage() {
  cat <<EOF
Usage: ${0##*/} options /path/to/chroot command
Options: [ -b | --bind-binpkgs ] [ -d | --debug ] [-k | --no-bind-kernel] [ -m | --bind-makeconf ]
         [ -n | --no-bashrc ] [ -N | --unshare ] [ -r | --bind-hostrepos ] [ -u | --user <user>[:group] ]

If 'command' is unspecified, ${0##*/} will launch /bin/bash.

Note that when using ${0##*/}, the target chroot directory *should* be a
mountpoint. This ensures that tools such as findmnt(8) have an
accurate hierarchy of the mounted filesystems within the chroot.

If your chroot target is not a mountpoint, you can bind mount the directory on
itself to make it a mountpoint, i.e. 'mount --bind /your/chroot /your/chroot'.

EOF
  exit 2
}

PARSED_ARGS=$(getopt -a -n ${0##*/} -o bdkmnNru: --long bind-binpkgs,debug,no-bind-kernel,bind-makeconf,no-bashrc,unshare,bind-hostrepos,user: -- "$@")
eval set -- "$PARSED_ARGS"
while :
do
  case "$1" in
    -b | --bind-binpkgs ) MOUNT_BINPKGS=1 ; shift ;;
    -d | --debug ) DEBUG=1; echo -e "\e[1;35mEnabling very-basic debug!\e[0m"; set -x; shift ;;
    -k | --no-bind-kernel) NO_MOUNT_KERNEL_SOURCE=1; shift ;;
    -m | --bind-makeconf ) MOUNT_MAKECONF=1 ; shift ;;
    -n | --no-bashrc ) NO_MOUNT_BASHRC=1 ; shift ;;
    -N | --unshare ) DO_UNSHARE=1 ; SETUP=unshare_setup ; shift ;;
    -r | --bind-hostrepos ) MOUNT_HOSTREPOS=1 ; shift ;;
    -u | --user ) USERSPEC="${2}"; shift 2 ;;
    -- ) shift ; break ;;
  esac
done

if [ $# -eq 0 ]; then
  usage
  die "No chroot directory specified"
fi

CHROOT_DIR=$1
shift
ARGS=("$@")

if [ -z ${FILES_DIR+x} ]; then
  FILES_DIR="$(dirname "$(readlink -f "$0")")"
fi

if ! [ -z ${DO_UNSHARE+x} ]; then
  $MOUNT_UNSHARE bash -c "$(declare_all); gentoo-chroot"
else
  gentoo-chroot
fi
